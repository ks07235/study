/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.107
 * Generated at: 2025-08-19 02:59:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1755572257798L));
    _jspx_dependants.put("jar:file:/C:/Study/LX/jsp-project/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/secTeamProject/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>회원가입</title>\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	font-family: Arial, sans-serif;\r\n");
      out.write("	background-color: #000;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* -- 1. 배경 이미지를 적용할 전체 래퍼(wrapper) 스타일 (추가) -- */\r\n");
      out.write(".page-wrapper {\r\n");
      out.write("	background-image: url('asset/images/mypageback.jpg'); /* 배경 이미지 경로 확인 필요 */\r\n");
      out.write("	background-size: cover;\r\n");
      out.write("	background-position: center top;\r\n");
      out.write("	background-repeat: no-repeat;\r\n");
      out.write("	position: relative;\r\n");
      out.write("	min-height: 100vh;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".page-wrapper::before {\r\n");
      out.write("	content: '';\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 0;\r\n");
      out.write("	left: 0;\r\n");
      out.write("	right: 0;\r\n");
      out.write("	bottom: 0;\r\n");
      out.write("	background-color: rgba(0, 0, 0, 0.7);\r\n");
      out.write("	z-index: 1;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* --- 2. 헤더와 콘텐츠 z-index 설정 (추가) --- */\r\n");
      out.write(".header-container, .register-container {\r\n");
      out.write("	position: relative;\r\n");
      out.write("	z-index: 2;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 헤더 배경 투명화 (추가) */\r\n");
      out.write(".header-container, .header-inner {\r\n");
      out.write("	background: transparent !important;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/* --- 3. 기존 register-container 스타일 (수정) --- */\r\n");
      out.write("/* 배경 관련 스타일은 제거하고 레이아웃만 남깁니다. */\r\n");
      out.write(".register-container {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	min-height: calc(100vh - 80px); /* 헤더 높이(80px 가정)를 뺀 높이 */\r\n");
      out.write("    padding: 40px 0; /* 너무 붙지 않도록 상하 여백 추가 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".register-box {\r\n");
      out.write("	background-color: #141414;\r\n");
      out.write("	padding: 40px;\r\n");
      out.write("	border-radius: 10px;\r\n");
      out.write("	box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\r\n");
      out.write("	width: 400px;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".register-box h1 {\r\n");
      out.write("	margin-bottom: 30px;\r\n");
      out.write("	color: #e0e0e0;\r\n");
      out.write("	font-size: 28px;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".register-box input {\r\n");
      out.write("	box-sizing: border-box; /* 너비 계산이 쉽도록 추가 */\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	padding: 12px 15px;\r\n");
      out.write("	margin: 10px 0;\r\n");
      out.write("	border: none;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	background-color: #333;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".register-box input::placeholder {\r\n");
      out.write("	color: #aaa;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".register-box button[type=\"submit\"] {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	padding: 12px;\r\n");
      out.write("	margin-top: 20px;\r\n");
      out.write("	background: linear-gradient(45deg, #E74C3C, #FF6B9D);\r\n");
      out.write("	border: none;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	font-size: 18px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".register-box button:hover {\r\n");
      out.write("	background: linear-gradient(45deg, #FF6B9D, #E74C3C);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".register-box a {\r\n");
      out.write("	display: block;\r\n");
      out.write("	margin-top: 15px;\r\n");
      out.write("	color: #aaa;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".register-box a:hover {\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	text-decoration: underline;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input-row {\r\n");
      out.write("  display: flex;\r\n");
      out.write("  gap: 6px;\r\n");
      out.write("  align-items: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input-row input {\r\n");
      out.write("  flex: 1;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".btn-inline {\r\n");
      out.write("  width: auto;\r\n");
      out.write("  margin: 0;\r\n");
      out.write("  padding: 11px 15px; /* 높이를 input과 맞추기 위해 조정 */\r\n");
      out.write("  font-size: 14px;\r\n");
      out.write("  background: #555;\r\n");
      out.write("  border: none;\r\n");
      out.write("  border-radius: 5px;\r\n");
      out.write("  color: #fff;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("  font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".btn-inline:hover {\r\n");
      out.write("  background: #666;\r\n");
      out.write("}\r\n");
      out.write(".error-msg {\r\n");
      out.write("	color: #e87c03;\r\n");
      out.write("	margin-top: 15px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"page-wrapper\">\r\n");
      out.write("\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/header.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("		<div class=\"register-container\">\r\n");
      out.write("			<div class=\"register-box\">\r\n");
      out.write("				<h1>회원가입</h1>\r\n");
      out.write("				<form action=\"register.do\" method=\"post\" id=\"registerForm\">\r\n");
      out.write("					<input type=\"hidden\" name=\"userNo\">\r\n");
      out.write("					\r\n");
      out.write("					<div class=\"input-row\">\r\n");
      out.write("						<input type=\"text\" name=\"userId\" id=\"userId\" placeholder=\"아이디를 입력하세요\"\r\n");
      out.write("							required\r\n");
      out.write("							oninput=\"resetIdStatus()\"> <button type=\"button\" id=\"checkIdBtn\" class=\"btn-inline\">중복확인</button>	\r\n");
      out.write("					</div>\r\n");
      out.write("					<small id=\"idStatus\"\r\n");
      out.write("						   style=\"display: block; text-align: left; padding: 5px 0; color: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${empty idStatusColor ? '#aaa' : idStatusColor}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\">\r\n");
      out.write("					  ");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("					</small>\r\n");
      out.write("					\r\n");
      out.write("					<input type=\"password\" name=\"userPassword\" placeholder=\"비밀번호를 입력하세요\" required> \r\n");
      out.write("					<input type=\"text\" name=\"userName\" placeholder=\"이름을 입력하세요\" required> \r\n");
      out.write("					<input type=\"tel\" name=\"userMobile\" placeholder=\"전화번호를 입력하세요\" required> \r\n");
      out.write("					<input type=\"number\" name=\"userAge\" placeholder=\"나이를 입력하세요\" required>\r\n");
      out.write("\r\n");
      out.write("					<button type=\"submit\" id=\"submitBtn\">회원가입</button>\r\n");
      out.write("					<a href=\"login.jsp\">로그인 페이지로 돌아가기</a>\r\n");
      out.write("				</form>\r\n");
      out.write("\r\n");
      out.write("				");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("\r\n");
      out.write("let idAvailable = false;\r\n");
      out.write("\r\n");
      out.write("// 입력 바뀌면 상태 초기화\r\n");
      out.write("function resetIdStatus() {\r\n");
      out.write("	idAvailable = false;\r\n");
      out.write("	const status = document.getElementById('idStatus');\r\n");
      out.write("	status.textContent = '아이디 중복여부를 확인하세요'\r\n");
      out.write("	status.style.color = '#aaa';\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 아이디 규칙: 4자 이상만 체크\r\n");
      out.write("function validateUserId(uid) {\r\n");
      out.write("	return uid && uid.trim().length >= 4;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 중복확인 버튼 클릭\r\n");
      out.write("document.getElementById('checkIdBtn').addEventListener('click', async () => {\r\n");
      out.write("	const userId = document.getElementById('userId').value.trim();\r\n");
      out.write("	const status = document.getElementById('idStatus');\r\n");
      out.write("	\r\n");
      out.write("	if (!validateUserId(userId)) {\r\n");
      out.write("		status.textContent = '아이디는 최소 4자 이상이어야 합니다.';\r\n");
      out.write("		status.style.color = '#e87c03';\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	try {\r\n");
      out.write("		// 서버에 중복 여부 조회 (checkId.do는 {\"available\":true/false} 반환)\r\n");
      out.write("		const url = 'checkId.do?userId=' + encodeURIComponent(userId);\r\n");
      out.write("		const res = await fetch(url, {\r\n");
      out.write("			method: 'GET',\r\n");
      out.write("			headers: { 'Accept': 'application/json' }\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		if (!res.ok) throw new Error('HTTP ' + res.status);\r\n");
      out.write("		const data = await res.json();\r\n");
      out.write("		\r\n");
      out.write("		if (data && data.available === true) {\r\n");
      out.write("			status.textContent = '사용 가능한 아이디입니다.';\r\n");
      out.write("			status.style.color = '#4caf50';\r\n");
      out.write("			idAvailable = true;\r\n");
      out.write("		} else {\r\n");
      out.write("			status.textContent = '이미 사용 중인 아이디입니다.';\r\n");
      out.write("			status.style.color = '#e87c03';\r\n");
      out.write("			idAvailable = false;\r\n");
      out.write("		}\r\n");
      out.write("	} catch (e) {\r\n");
      out.write("		console.error(e);\r\n");
      out.write("		status.textContent = '중복확인 중 오류가 발생했습니다.';\r\n");
      out.write("		status.style.color = '#e87c03';\r\n");
      out.write("		idAvailable = false;\r\n");
      out.write("	}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 중복확인 없이 제출하려 하면 막기\r\n");
      out.write("document.getElementById('registerForm').addEventListener('submit', (e) => {\r\n");
      out.write("	if (!idAvailable) {\r\n");
      out.write("		e.preventDefault();\r\n");
      out.write("		const status = document.getElementById('idStatus');\r\n");
      out.write("		status.textContent = '아이디 중복확인을 먼저 진행해주세요.';\r\n");
      out.write("		status.style.color = '#e87c03';\r\n");
      out.write("	}\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/bottom.jsp", out, false);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fout_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fout_005f0.setParent(null);
    // /register.jsp(174,7) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${empty idStatusMsg ? '아이디 중복여부를 확인하세요.' : idStatusMsg}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
    if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fif_005f0.setParent(null);
    // /register.jsp(186,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty errorMsg || not empty msg}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
    if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("					<p style=\"color: red;\">");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${errorMsg}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("</p>\r\n");
        out.write("					<p style=\"color: blue;\">");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${msg}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("</p>\r\n");
        out.write("				");
        int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
    return false;
  }
}
